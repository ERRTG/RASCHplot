N <- nrow(data)
m_i <- sapply(1:k, FUN = function(i) length(unique(data[,i]))-1)
parsidx <- rep(1:k, m_i)
if (any(which.item == "all")) {
itmidx <- 1:k
} else {
itmidx <- suppressWarnings(as.numeric(which.item))
if (anyNA(itmidx)) {
stop("all values of which.item can not be converted to numeric")
}
}
if (is.null(names(strat.vars))) {
stop("the list of stratification variables is not named")
}
if (is.list(lower.groups)) {
if (is.null(names(lower.groups))) {
stop("the list lower.groups is not named")
}
if (!all(names(lower.groups) == names(strat.vars))) {
stop("names of lower.groups and strat.vars must be identical")
}
if (all(sapply(lower.groups, is.list))) {
if (!all(sapply(lower.groups, length) == sapply(strat.vars, function(x) nlevels(as.factor(x))))) {
stop("length of lists in lower.groups list must be equal to number of levels in corresponding strat.vars")
}
}
}
n.itemcat <- apply(data, 2, FUN = function(x) {
max(x, na.rm = T) - min(x, na.rm = T)
}
)
par.itemgrp <- rep(1:ncol(data), times = n.itemcat)
if (all(sapply(lower.groups, is.double)) | all(sapply(lower.groups, is.integer))) {
if (any(unlist(lower.groups) > length(betas)))
stop("lower.group index greater than maximum possible score")
}
if (any(itmidx > k)) {
stop("some values of which.item are greater than number of items in the model")
}
if (any(itmidx < 1)) {
stop("some values of which.item < 1")
}
if (!all(sapply(strat.vars, length) == N)) {
stop("lengths of stratification variables must equal number of rows in data input of RM")
}
pp <- list(rep(NA, length(itmidx)))
ii <- itmidx
Tot.val <- 0:length(betas)
plotidx <- 1
for (itm in ii) {
exp.val <- sapply(Tot.val, FUN = function(R) {
l <- par.itemgrp[par.itemgrp!=itm]
par.itemgrp_noitem <- ifelse(l > itm, l-1, l)
g1 <- gamma_r_rec_pcm(betas, R, par.itemgrp)
return(sum(sapply(1:sum(par.itemgrp==itm), FUN = function(X) {
g2 <- gamma_r_rec_pcm(betas[par.itemgrp!=itm], R-X, par.itemgrp_noitem)
return(X*exp(betas[par.itemgrp==itm][X])*g2/g1)
})
))
})
data_exp <- data.frame(Tot.val, exp.val)
pp[[plotidx]] <- vector(mode = "list", length(strat.vars))
names(pp[[plotidx]]) <- names(strat.vars)
for(l in seq_along(strat.vars)) {
stratname <- names(strat.vars)[l]
levstrat <- levels(as.factor(strat.vars[[l]]))
nlevstrat <- length(levstrat)
if (!is.double(lower.groups) & !is.integer(lower.groups)) {
if (all(lower.groups == "all")) {
Tot.val_grp <- 0:length(betas)
obs.val_grp <- lapply(1:nlevstrat, function(j) {
sapply(Tot.val_grp, FUN = function(x) {
strat.data <- data[strat.vars[[l]] == levstrat[j], ]
mean(strat.data[which(rowSums(strat.data) == x), itm])
})
})
var.val_grp <- lapply(1:nlevstrat, function(j) {
sapply(Tot.val_grp, FUN = function(x) {
strat.data <- data[strat.vars[[l]] == levstrat[j], ]
var(strat.data[which(rowSums(strat.data) == x), itm])
})
})
n.val_grp <- lapply(1:nlevstrat, function(j) {
sapply(Tot.val_grp, FUN = function(x) {
strat.data <- data[strat.vars[[l]] == levstrat[j], ]
length(strat.data[which(rowSums(strat.data) == x), itm])
})
})
Tot.val_grp <- lapply(1:nlevstrat, function(j) 0:length(betas))
}
}
if (is.double(unlist(lower.groups))|is.integer(unlist(lower.groups))) {
if (is.list(lower.groups)) {
lgrpsgrps <- lower.groups[[stratname]]
} else {
lgrpsgrps <- lower.groups
}
if(!is.list(lgrpsgrps)) {
lgrpsgrps <- lapply(1:nlevstrat, function(x) lgrpsgrps) #list(lgrpsgrps)
names(lgrpsgrps) <- levstrat
}
#if(!all(sapply(lgrpsgrps, is.list))) {
#  lgrpsgrps <- lapply(1:nlevstrat, function(x) lgrpsgrps)
#}
Tot.val_grp <- vector(mode = "list", length(lgrpsgrps))
obs.val_grp <- vector(mode = "list", length(lgrpsgrps))
var.val_grp <- vector(mode = "list", length(lgrpsgrps))
n.val_grp <- vector(mode = "list", length(lgrpsgrps))
for (j in seq_along(lgrpsgrps)) { #1:nlevstrat) {
strat.data <- data[strat.vars[[l]] == levstrat[j], ]
#for(lgrpsidx in seq_along(lgrpsgrps)) {
lgrps <- lgrpsgrps[[levstrat[j]]] # unlist(lgrpsgrps[[j]])
breaks <- sort(x = unique(c(floor(lgrps), min(Tot.val))))
n.groups <- length(breaks)
for (i in seq_along(breaks)) {
if (i != n.groups) {
obs.val_grp[[j]][i] <- mean(strat.data[which(rowSums(strat.data) %in% breaks[i]:(breaks[i+1]-1)), itm])
var.val_grp[[j]][i] <- var(strat.data[which(rowSums(strat.data) %in% breaks[i]:(breaks[i+1]-1)), itm])
n.val_grp[[j]][i] <- length(strat.data[which(rowSums(strat.data) %in% breaks[i]:(breaks[i+1]-1)), itm])
Tot.val_grp[[j]][i] <- mean(rowSums(strat.data)[which(rowSums(strat.data) %in% breaks[i]:(breaks[i+1]-1))])
} else{
obs.val_grp[[j]][i] <- mean(strat.data[which(rowSums(strat.data) %in% breaks[i]:max(Tot.val)), itm])
var.val_grp[[j]][i] <- var(strat.data[which(rowSums(strat.data) %in% breaks[i]:max(Tot.val)), itm])
n.val_grp[[j]][i] <- length(strat.data[which(rowSums(strat.data) %in% breaks[i]:max(Tot.val)), itm])
Tot.val_grp[[j]][i] <- mean(rowSums(strat.data)[which(rowSums(strat.data) %in% breaks[i]:max(Tot.val))])
}
}
#}
}
}
data_obs <- lapply(1:nlevstrat, function(j) {
df <- data.frame(Tot.val_grp = Tot.val_grp[[j]],
obs.val_grp = obs.val_grp[[j]],
var.val_grp = var.val_grp[[j]],
n.val_grp = n.val_grp[[j]],
CI.bound = NA,
strat.var = levstrat[j])
df <- df[df$n.val_grp != 0, ]
if (error.bar) {
df$CI.bound <- 1.96*sqrt(df[,"var.val_grp"]/df[,"n.val_grp"])
}
df
})
itmtit <- colnames(data)[itm]
data_obs_long <- do.call(rbind, data_obs)
cidx <- 1:(nlevels(as.factor(data_obs_long$strat.var)) + 1)
col <- c("darkgrey", "#E69F00", "#56B4E9", "#009E73", "#F0E442",
"#0072B2", "#D55E00", "#CC79A7")[cidx]
names(col) <- c("Expected", levels(as.factor(data_obs_long$strat.var)))
pp[[plotidx]][[l]] <- difplot(data_exp, Tot.val, exp.val, data_obs_long, itmtit, stratname, dodge.width, point.size, line.size, line.type, errorbar.width, errorbar.size, ...)
}
plotidx <- plotidx + 1
}
library(RASCHplot)
library(RASCHplot)
shiny::runApp('inst/apps/RMDitemfit')
library(RASCHplot)
runApp('inst/apps/RMDitemfit')
runApp('inst/apps/RMPitemfit')
runApp('inst/apps/RMDitemfit')
library(RASCHplot)
devtools::document()
library(RASCHplot)
library(RASCHplot)
shiny::runApp('inst/apps/RMPitemfit')
library(RASCHplot)
library(eRm)
data(SPADI)
SPADI.complete <- SPADI[complete.cases(SPADI), ]
it.SPADI <- SPADI.complete[, 9:16]
model.SPADI <- eRm::PCM(it.SPADI)
strat.vars <- list(gender = SPADI.complete[, "gender"])
DIFplot(model = model.SPADI, strat.vars = strat.vars)
library(RASCHplot)
DIFplot(model = model.SPADI, strat.vars = strat.vars)
devtools::document()
library(RASCHplot)
DIFplot(model = model.SPADI, strat.vars = strat.vars)
library(RASCHplot)
library(RASCHplot)
devtools::document()
library(RASCHplot)
DIFplot(model = model.SPADI, strat.vars = strat.vars)
library(RASCHplot)
library(RASCHplot)
devtools::document()
library(RASCHplot)
library(iarm)
it.AMTS <- amts[,4:13]
it.AMTSc <- it.AMTS[complete.cases(it.AMTS), ]
idx <- which(rowSums(it.AMTSc) %in% c(0,ncol(it.AMTSc)))
dat <- it.AMTSc[-idx,]
fit <- eRm::PCM(dat, sum0 = TRUE)
pres.pcm <- eRm::person.parameter(fit)
eRm::itemfit(pres.pcm)
fit <- RASCHfits(method.item = "PCML",
method.person = "WML",
dat = dat)
beta <- fit$beta
theta <- fit$theta
tmp <- simRASCHstats(beta, theta, method.item = "JML", method.person = "MML", B = 10, model = "RMD", trace.it = 1)
tmp <- simRASCHstats(beta, theta, method.item = "JML", method.person = "MLE", B = 10, model = "RMD", trace.it = 1)
stats <- RASCHstats(beta, theta, dat)
outfits <- data.frame(x = stats$Outfit,
y = rep(0, length(stats$Outfit)))
outfits
eRm::itemfit(pres.pcm)
names(pres.pcm)
betaeRm <- pres.pcm$betapar
thetaeRm <- pres.pcm$thetapar
betaeRm
beta
fit <- RASCHfits(method.item = "JML",
method.person = "MLE",
dat = dat)
beta <- fit$beta
theta <- fit$theta
beta
betaeRm
betaeRm <- -pres.pcm$betapar
betaeRm
beta
tmp <- simRASCHstats(beta, theta, method.item = "JML", method.person = "MLE", B = 10, model = "RMD", trace.it = 1)
stats <- RASCHstats(beta, theta, dat)
outfits <- data.frame(x = stats$Outfit,
y = rep(0, length(stats$Outfit)))
outfits
eRm::itemfit(pres.pcm)
it.SPADI <- SPADI
it.SPADIc <- it.SPADI[complete.cases(it.SPADI), ]
idx <- which(rowSums(it.SPADIc) %in% c(0,ncol(it.SPADIc)))
dat <- it.SPADIc[-idx,]
fit <- eRm::PCM(dat, sum0 = TRUE)
dat
it.SPADI <- SPADI[,-c(1,2)]
it.SPADIc <- it.SPADI[complete.cases(it.SPADI), ]
idx <- which(rowSums(it.SPADIc) %in% c(0,ncol(it.SPADIc)))
dat <- it.SPADIc[-idx,]
fit <- eRm::PCM(dat, sum0 = TRUE)
fit <- eRm::RM(dat, sum0 = TRUE)
pres.pcm <- eRm::person.parameter(fit)
eRm::itemfit(pres.pcm)
betaeRm <- -pres.pcm$betapar
thetaeRm <- pres.pcm$thetapar
fit <- RASCHfits(method.item = "JML",
method.person = "MLE",
dat = dat)
beta <- fit$beta
theta <- fit$theta
beta
betaeRm
dat
it.SPADI <- SPADI[,-c(1,2)]
it.SPADI
it.SPADIc <- it.SPADI[complete.cases(it.SPADI), ]
it.SPADIc
idx <- which(rowSums(it.SPADIc) %in% c(0,ncol(it.SPADIc)))
idx
dat <- it.SPADIc
fit <- eRm::PCM(dat, sum0 = TRUE)
it.SPADI <- SPADI[,-c(1,2,3)]
it.SPADIc <- it.SPADI[complete.cases(it.SPADI), ]
idx <- which(rowSums(it.SPADIc) %in% c(0,ncol(it.SPADIc)))
dat <- it.SPADIc
fit <- eRm::PCM(dat, sum0 = TRUE)
pres.pcm <- eRm::person.parameter(fit)
eRm::itemfit(pres.pcm)
betaeRm <- -pres.pcm$betapar
thetaeRm <- pres.pcm$thetapar
betaeRm
fit <- RASCHfits(method.item = "JML",
method.person = "MLE",
dat = dat)
beta <- fit$beta
theta <- fit$theta
betaeRm
beta
fit <- eRm::PCM(dat)
pres.pcm <- eRm::person.parameter(fit)
eRm::itemfit(pres.pcm)
betaeRm <- -pres.pcm$betapar
thetaeRm <- pres.pcm$thetapar
betaeRm
tmp <- simRASCHstats(beta, theta, method.item = "JML", method.person = "MLE", B = 10, model = "RMD", trace.it = 1)
stats <- RASCHstats(beta, theta, dat)
outfits <- data.frame(x = stats$Outfit,
y = rep(0, length(stats$Outfit)))
tmp <- simRASCHstats(beta, theta, method.item = "JML", method.person = "MLE", B = 10, model = "RMP", trace.it = 1)
beta
tmp <- simRASCHstats(betaeRm, theta, method.item = "JML", method.person = "MLE", B = 10, model = "RMP", trace.it = 1)
tmp <- simRASCHstats(beta, theta, method.item = "JML", method.person = "MLE", B = 10, model = "RMP", trace.it = 1)
beta
?sirt::rasch.pairwise
library(RASCHplot)
library(RASCHplot)
data(SPADI)
dat <- droplevels(SPADI)
dat <- dat[complete.cases(dat), ]
itmsP <- dat[ ,4:8]
itmsD <- dat[ ,9:16]
?runApp
?runApp
?switch
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
devtools::document()
library(RASCHplot)
library(RASCHplot)
devtools::document()
devtools::document()
devtools::document()
?pageWithSidebar
devtools::document()
rlang::last_error()
?pkgload:::source_many
?pkgload::load_all
devtools::document()
library(RASCHplot)
devtools::document()
library(RASCHplot)
devtools::document()
library(RASCHplot)
?shinyServer
library(RASCHplot)
library(RASCHplot)
devtools::document()
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
devtools::document()
library(RASCHplot)
library(RASCHplot)
devtools::document()
devtools::document()
library(RASCHplot)
devtools::document()
devtools::document()
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
?system.file
system.file(paste0("apps/", "RMDitemfit"), package = "RASCHplot")
library(RASCHplot)
library(RASCHplot)
appDir <- system.file(paste0("apps/", name), package = "RASCHplot")
name = "RMDitemfit"
appDir <- system.file(paste0("apps/", name), package = "RASCHplot")
#if (appDir == "") stop("The shiny app ", name, " does not exist")
#shiny::runApp(appDir, ...)
source(paste0(appDir, "server.R"))
appDir <- system.file(paste0("apps/", name, "/"), package = "RASCHplot")
#if (appDir == "") stop("The shiny app ", name, " does not exist")
#shiny::runApp(appDir, ...)
source(paste0(appDir, "server.R"))
library(RASCHplot)
library(RASCHplot)
devtools::document()
library(RASCHplot)
library(RASCHplot)
devtools::document()
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
devtools::document()
library(RASCHplot)
library(RASCHplot)
devtools::document()
library(RASCHplot)
devtools::document()
rm(list = c("RMDserver"))
devtools::document()
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
devtools::document()
library(RASCHplot)
devtools::document()
library(RASCHplot)
capture.output(RMDserver)
devtools::document()
library(RASCHplot)
library(RASCHplot)
RMDui()
capture.output(RMDui)
library(RASCHplot)
library(RASCHplot)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
?runif
runif(min=0, max = 1)
devtools::document()
library(RASCHplot)
library(RASCHplot)
devtools::document()
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
library(iarm)
it.AMTS <- amts[,4:13]
it.AMTSc <- it.AMTS[complete.cases(it.AMTS), ]
idx <- which(rowSums(it.AMTSc) %in% c(0,ncol(it.AMTSc)))
dat <- it.AMTSc[-idx,]
betaeRm <- -pres.pcm$betapar
thetaeRm <- pres.pcm$thetapar
fit <- RASCHfits(method.item = "JML",
method.person = "MLE",
dat = dat)
beta <- fit$beta
theta <- fit$theta
beta
stats <- RASCHstats(beta, theta, dat)
library(RASCHplot)
devtools::document()
library(RASCHplot)
library(RASCHplot)
devtools::document()
devtools::document()
library(RASCHplot)
devtools::document()
library(RASCHplot)
library(RASCHplot)
devtools::document()
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
RASCHstats()
RASCHstats
library(RASCHplot)
RASCHstats
citation("eRm")
devtools::document()
.S3PrimitiveGenerics
?InternalMethods
devtools::document()
devtools::document()
library(RASCHplot)
citation("ggplot2")
theta <- read.csv("/home/ann-sophie/wip/pa2122/karl/inoutshiny/Knox_pp.csv")$theta
beta <- read.csv("/home/ann-sophie/wip/pa2122/karl/inoutshiny/Knox_ip.csv")$beta
method.item = c("PCML")
method.person = c("WML")
B=10
model = c("RMD")
trace.it = 0
(model == "RMP")
N <- length(theta)
K <- length(beta)
#-------------------- Compute probabilities ----------------------------
probs <- sapply(1:K, function(ii) irffct(theta = theta, b = beta, ii)[, 2])
#'
#' Item response function
#'
#' @param b Vector or matrix of item parameters.
#' @param theta Vector of person parameters.
#' @param ii item index
#'
#' @noRd
irffct <- function(theta, b, ii){
eta <- exp(theta - b[ii])
pbs <- eta / (1 + eta)
pbs <- cbind(1 - pbs, pbs)
return(pbs)
}
#' PCM function
#'
#' @param b Vector or matrix of item parameters.
#' @param theta Vector of person parameters.
#' @param ii item index
#'
#' @noRd
pcmfct <- function(theta, b, ii){
N <- length(theta)  # number of persons
M <- nrow(b)        # max number of categories - 1 for items
beta0 <- 0# - sum(beta[, i]) #
matb <- matrix(c(beta0, b[, ii]), nrow = N, ncol = M+1, byrow = TRUE)
matx <- matrix(0:M, nrow = N, ncol = M+1, byrow = TRUE)
eta <- exp(theta * matx - matb)
pbs <- eta / rowSums(eta, na.rm=TRUE)
return(pbs)
}
#-------------------- Compute probabilities ----------------------------
probs <- sapply(1:K, function(ii) irffct(theta = theta, b = beta, ii)[, 2])
#------------- Simulate item responses (0/1) -----------------------
X <- simResps(model = "RMD", probs, B)
probs
beta
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
library(RASCHplot)
